/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bg.jug.workshop.liferay.cfp.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.Resource;
import com.liferay.portal.kernel.model.ResourceConstants;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.PortalUtil;

import bg.jug.workshop.liferay.cfp.exception.NoSuchVenueException;
import bg.jug.workshop.liferay.cfp.model.Venue;
import bg.jug.workshop.liferay.cfp.service.VenueLocalService;
import bg.jug.workshop.liferay.cfp.service.base.VenueLocalServiceBaseImpl;

/**
 * The implementation of the venue local service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link bg.jug.workshop.liferay.cfp.service.VenueLocalService} interface.
 *
 * <p>
 * This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VenueLocalServiceBaseImpl
 * @see bg.jug.workshop.liferay.cfp.service.VenueLocalServiceUtil
 */
public class VenueLocalServiceImpl extends VenueLocalServiceBaseImpl {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never reference this class directly. Always use {@link bg.jug.workshop.liferay.cfp.service.VenueLocalServiceUtil} to access the venue local service.
	 */
	private static Logger logger = LoggerFactory.getLogger(VenueLocalServiceImpl.class);
	
	/**
	 * Returns a list of all venues for given platform instance (company) and site (group)
	 * 
	 * @param companyId the id of the portal instance (guarantees data sharding in multi-tenant environments)
	 * @param groupId the id of the site (guarantees data sharding in multi-hosting environments)
	 */
	public List<Venue> getGroupVenues(long companyId, long groupId) {
		return venuePersistence.findByCompanyAndGroup(companyId, groupId, -1, -1);
	}

	/**
	 * Returns a subset (page) of venues for given platform instance (company) and site (group)
	 * 
	 * @param companyId the id of the portal instance (guarantees data sharding in multi-tenant environments)
	 * @param groupId the id of the site (guarantees data sharding in multi-hosting environments)
	 * @param start the record to start from
	 * @param end the record to end at
	 */
	public List<Venue> getGroupVenues(long companyId, long groupId, int start, int end) {
		return venuePersistence.findByCompanyAndGroup(companyId, groupId, start, end);
	}

	public int countGroupVenues(long companyId, long groupId) {
		return venuePersistence.countByCompanyAndGroup(companyId, groupId);
	}

	
	/** 
	 * This method creates a new venue or updates an existing one. 
	 * <p>
	 * If there is {@code venueId} provided it updates the venue with that id. Otherwise it creates a new venue.
	 * <p>
	 * This method also creates/updates :
	 * <ul>
	 * 	<li> respective {@link Resource} entity. This is needed to link the venue with the resource framework 
	 * which among other things is used to manage resources' permissions 
	 * </ul>
	 * <strong>NOTE: Important information for wrapping this method: </strong>
	 * <ul>
	 * 	<li> it uses  {@code counterLocalService.increment(Venue.class.getName())} as opposite to {@code counterLocalService.increment()}.
	 * Take that into account to avoid id collisions if you modify the venue creation process. 
	 * </ul>
	 *  
	 * 	@param venueId the id of the venue to save. If provided the it MUST be positive value.
	 *  @param name the venue's name
	 *  @param address the venue's address
	 *  @param longitude the venue's longitude
	 *  @param latitude the venue's latitude
	 * 	@param serviceContext the context of the service request (generated by the caller from servlet or portlet requests)
	 * 
	 * 	@throws IllegalArgumentException if {@code venueId} is provided but it is not a positive value
	 * 	@throws NoSuchVenueException if {@code venueId} is provided but a venue with such id can not be found
	 * 	@throws PortalException if any other error occur 
	 */
	public Venue saveVenue(
			Optional<Long> venueId, 
			String name, 
			String address, 
			double longitude, 
			double latitude, 
			ServiceContext serviceContext) throws PortalException {

		/*
		 * For detailed description of what exactly we do in this method and why,
		 * please see TalkLocalServiceImpl class. It has almost identical method
		 * `saveTalk` which is well documented.
		 */
		
		Venue venue;
		if (venueId.isPresent()) {
			long id = venueId.get();
			if (id <= 0) throw new IllegalArgumentException();
			venue = getVenue(id);
		} else {
			venue = createVenue(counterLocalService.increment(Venue.class.getName()));	
		}

		long userId = serviceContext.getUserId();
		long companyId = serviceContext.getCompanyId();
		long groupId = serviceContext.getScopeGroupId();
		Date date = new Date();

		venue.setCompanyId(companyId);
		venue.setGroupId(groupId);
		venue.setUserId(userId);
		venue.setUserName(PortalUtil.getUserName(userId, "unknown"));
		if (venue.isNew()) {
			venue.setCreateDate(date);
		}
		venue.setModifiedDate(date);
		venue.setName(name);
		venue.setAddress(address);
		venue.setLongitude(longitude);
		venue.setLatitude(latitude);
	
		if (venue.isNew()) {
			resourceLocalService.addResources(
					companyId,					// the id of the instance (useful in mutli-tenant environment)
					groupId,					// the id of the site
					userId,						// the id of the currently logged in user
				    Venue.class.getName(), 		// the type of the model to add resource for
				    venue.getVenueId(), 		// the id of the model entity to add resource for
				    false, 						// is this a portlet resource (if it is not then it is a model resource)
				    true, 						// should the default permissions for the site be used 
				    true						// should the default permissions for the guest user be used
				    );
		} else {
			resourceLocalService.updateResources(
					companyId,								// the id of the instance (useful in mutli-tenant environment)
					groupId,								// the id of the site
					Venue.class.getName(), 					// the type of the model to add resource for
					venue.getVenueId(), 					// the id of the model entity to add resource for
				    serviceContext.getGroupPermissions(), 	// the new group permissions 
				    serviceContext.getGuestPermissions()	// the new guest permissions
				    );
		}
		
		return super.updateVenue(venue);
	}
	
	public Venue deleteVenue(long venueId, ServiceContext serviceContext) throws PortalException {
		resourceLocalService.deleteResource(
				serviceContext.getCompanyId(),			// the id of the instance (useful in mutli-tenant environment)
				Venue.class.getName(), 					// the type of the model to add resource for
                ResourceConstants.SCOPE_INDIVIDUAL,
                venueId);
		return super.deleteVenue(venueId);
	}

	
	/* 
	 * ==================================================
	 * NOTE: While service builder generates many convenient methods, once we've changed 
	 * the basic CRUD logic, those must not be used. To not confuse callers and wrappers 
	 * we should deprecate and override those automatically generated methods that appear
	 * to be useful but collide with the changed CRUD logic.
	 * ==================================================  
	 */	
	
	
	/**
	 * This automatically generated method must not be used and was overridden to throw {@link UnsupportedOperationException}.  
	 * Please use {@link VenueLocalService#saveVenue(Optional, String, String, double, double, ServiceContext)} instead.
	 * 
	 *  @throws IllegalArgumentException
	 */
	@Override
	@Deprecated
	public Venue addVenue(Venue venue) {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * This automatically generated method must not be used and was overridden to throw {@link UnsupportedOperationException}.  
	 * Please use {@link VenueLocalService#saveVenue(Optional, String, String, double, double, ServiceContext)} instead.
	 * 
	 *  @throws IllegalArgumentException
	 */
	@Override
	@Deprecated
	public Venue updateVenue(Venue venue) {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * This automatically generated method must not be used and was overridden to throw {@link UnsupportedOperationException}.  
	 * Please use {@link VenueLocalService#deleteVenue(long, ServiceContext)} instead.
	 * 
	 *  @throws IllegalArgumentException
	 */
	@Override
	@Deprecated
	public Venue deleteVenue(Venue venue) {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * This automatically generated method must not be used and was overridden to throw {@link UnsupportedOperationException}.  
	 * Please use {@link VenueLocalService#deleteVenue(long, ServiceContext)} instead.
	 * 
	 *  @throws IllegalArgumentException
	 */
	@Override
	@Deprecated
	public Venue deleteVenue(long venueId) throws PortalException {
		throw new UnsupportedOperationException();
	}
	
	/**
	 * This automatically generated method should not be used as it does not take multi-tenancy and multi-hosting into account.
	 */
	@Override
	public List<Venue> getVenues(int start, int end) {
		logger.warn("This method does not take multi-tenancy and multi-hosting into account. Most likely this is not what you want!");
		return super.getVenues(start, end);
	}
	
	/**
	 * This automatically generated method should not be used as it does not take multi-tenancy and multi-hosting into account.
	 */
	@Override
	public int getVenuesCount() {
		logger.warn("This method does not take multi-tenancy and multi-hosting into account. Most likely this is not what you want!");
		return super.getVenuesCount();
	}
}
