/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bg.jug.workshop.liferay.cfp.service.base;

import aQute.bnd.annotation.ProviderType;

import bg.jug.workshop.liferay.cfp.model.Talk;
import bg.jug.workshop.liferay.cfp.service.TalkLocalService;
import bg.jug.workshop.liferay.cfp.service.persistence.EventPersistence;
import bg.jug.workshop.liferay.cfp.service.persistence.TalkPersistence;
import bg.jug.workshop.liferay.cfp.service.persistence.VenuePersistence;

import com.liferay.dynamic.data.mapping.service.persistence.DDMStructureLinkPersistence;
import com.liferay.dynamic.data.mapping.service.persistence.DDMTemplateLinkPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the talk local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link bg.jug.workshop.liferay.cfp.service.impl.TalkLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see bg.jug.workshop.liferay.cfp.service.impl.TalkLocalServiceImpl
 * @see bg.jug.workshop.liferay.cfp.service.TalkLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TalkLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TalkLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link bg.jug.workshop.liferay.cfp.service.TalkLocalServiceUtil} to access the talk local service.
	 */

	/**
	 * Adds the talk to the database. Also notifies the appropriate model listeners.
	 *
	 * @param talk the talk
	 * @return the talk that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Talk addTalk(Talk talk) {
		talk.setNew(true);

		return talkPersistence.update(talk);
	}

	/**
	 * Creates a new talk with the primary key. Does not add the talk to the database.
	 *
	 * @param talkId the primary key for the new talk
	 * @return the new talk
	 */
	@Override
	public Talk createTalk(long talkId) {
		return talkPersistence.create(talkId);
	}

	/**
	 * Deletes the talk with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param talkId the primary key of the talk
	 * @return the talk that was removed
	 * @throws PortalException if a talk with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Talk deleteTalk(long talkId) throws PortalException {
		return talkPersistence.remove(talkId);
	}

	/**
	 * Deletes the talk from the database. Also notifies the appropriate model listeners.
	 *
	 * @param talk the talk
	 * @return the talk that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Talk deleteTalk(Talk talk) {
		return talkPersistence.remove(talk);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Talk.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return talkPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link bg.jug.workshop.liferay.cfp.model.impl.TalkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return talkPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link bg.jug.workshop.liferay.cfp.model.impl.TalkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return talkPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return talkPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return talkPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Talk fetchTalk(long talkId) {
		return talkPersistence.fetchByPrimaryKey(talkId);
	}

	/**
	 * Returns the talk matching the UUID and group.
	 *
	 * @param uuid the talk's UUID
	 * @param groupId the primary key of the group
	 * @return the matching talk, or <code>null</code> if a matching talk could not be found
	 */
	@Override
	public Talk fetchTalkByUuidAndGroupId(String uuid, long groupId) {
		return talkPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the talk with the primary key.
	 *
	 * @param talkId the primary key of the talk
	 * @return the talk
	 * @throws PortalException if a talk with the primary key could not be found
	 */
	@Override
	public Talk getTalk(long talkId) throws PortalException {
		return talkPersistence.findByPrimaryKey(talkId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(talkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Talk.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("talkId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(talkLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Talk.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("talkId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(talkLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Talk.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("talkId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<Talk>() {
				@Override
				public void performAction(Talk talk) throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						talk);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(Talk.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return talkLocalService.deleteTalk((Talk)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return talkPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the talks matching the UUID and company.
	 *
	 * @param uuid the UUID of the talks
	 * @param companyId the primary key of the company
	 * @return the matching talks, or an empty list if no matches were found
	 */
	@Override
	public List<Talk> getTalksByUuidAndCompanyId(String uuid, long companyId) {
		return talkPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of talks matching the UUID and company.
	 *
	 * @param uuid the UUID of the talks
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of talks
	 * @param end the upper bound of the range of talks (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching talks, or an empty list if no matches were found
	 */
	@Override
	public List<Talk> getTalksByUuidAndCompanyId(String uuid, long companyId,
		int start, int end, OrderByComparator<Talk> orderByComparator) {
		return talkPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the talk matching the UUID and group.
	 *
	 * @param uuid the talk's UUID
	 * @param groupId the primary key of the group
	 * @return the matching talk
	 * @throws PortalException if a matching talk could not be found
	 */
	@Override
	public Talk getTalkByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return talkPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the talks.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link bg.jug.workshop.liferay.cfp.model.impl.TalkModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of talks
	 * @param end the upper bound of the range of talks (not inclusive)
	 * @return the range of talks
	 */
	@Override
	public List<Talk> getTalks(int start, int end) {
		return talkPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of talks.
	 *
	 * @return the number of talks
	 */
	@Override
	public int getTalksCount() {
		return talkPersistence.countAll();
	}

	/**
	 * Updates the talk in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param talk the talk
	 * @return the talk that was updated
	 * @throws UnsupportedOperationException
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Talk updateTalk(Talk talk) throws UnsupportedOperationException {
		return talkPersistence.update(talk);
	}

	/**
	 */
	@Override
	public void addEventTalk(long eventId, long talkId) {
		eventPersistence.addTalk(eventId, talkId);
	}

	/**
	 */
	@Override
	public void addEventTalk(long eventId, Talk talk) {
		eventPersistence.addTalk(eventId, talk);
	}

	/**
	 */
	@Override
	public void addEventTalks(long eventId, long[] talkIds) {
		eventPersistence.addTalks(eventId, talkIds);
	}

	/**
	 */
	@Override
	public void addEventTalks(long eventId, List<Talk> talks) {
		eventPersistence.addTalks(eventId, talks);
	}

	/**
	 */
	@Override
	public void clearEventTalks(long eventId) {
		eventPersistence.clearTalks(eventId);
	}

	/**
	 */
	@Override
	public void deleteEventTalk(long eventId, long talkId) {
		eventPersistence.removeTalk(eventId, talkId);
	}

	/**
	 */
	@Override
	public void deleteEventTalk(long eventId, Talk talk) {
		eventPersistence.removeTalk(eventId, talk);
	}

	/**
	 */
	@Override
	public void deleteEventTalks(long eventId, long[] talkIds) {
		eventPersistence.removeTalks(eventId, talkIds);
	}

	/**
	 */
	@Override
	public void deleteEventTalks(long eventId, List<Talk> talks) {
		eventPersistence.removeTalks(eventId, talks);
	}

	/**
	 * Returns the eventIds of the events associated with the talk.
	 *
	 * @param talkId the talkId of the talk
	 * @return long[] the eventIds of events associated with the talk
	 */
	@Override
	public long[] getEventPrimaryKeys(long talkId) {
		return talkPersistence.getEventPrimaryKeys(talkId);
	}

	/**
	 */
	@Override
	public List<Talk> getEventTalks(long eventId) {
		return eventPersistence.getTalks(eventId);
	}

	/**
	 */
	@Override
	public List<Talk> getEventTalks(long eventId, int start, int end) {
		return eventPersistence.getTalks(eventId, start, end);
	}

	/**
	 */
	@Override
	public List<Talk> getEventTalks(long eventId, int start, int end,
		OrderByComparator<Talk> orderByComparator) {
		return eventPersistence.getTalks(eventId, start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getEventTalksCount(long eventId) {
		return eventPersistence.getTalksSize(eventId);
	}

	/**
	 */
	@Override
	public boolean hasEventTalk(long eventId, long talkId) {
		return eventPersistence.containsTalk(eventId, talkId);
	}

	/**
	 */
	@Override
	public boolean hasEventTalks(long eventId) {
		return eventPersistence.containsTalks(eventId);
	}

	/**
	 */
	@Override
	public void setEventTalks(long eventId, long[] talkIds) {
		eventPersistence.setTalks(eventId, talkIds);
	}

	/**
	 * Returns the event local service.
	 *
	 * @return the event local service
	 */
	public bg.jug.workshop.liferay.cfp.service.EventLocalService getEventLocalService() {
		return eventLocalService;
	}

	/**
	 * Sets the event local service.
	 *
	 * @param eventLocalService the event local service
	 */
	public void setEventLocalService(
		bg.jug.workshop.liferay.cfp.service.EventLocalService eventLocalService) {
		this.eventLocalService = eventLocalService;
	}

	/**
	 * Returns the event persistence.
	 *
	 * @return the event persistence
	 */
	public EventPersistence getEventPersistence() {
		return eventPersistence;
	}

	/**
	 * Sets the event persistence.
	 *
	 * @param eventPersistence the event persistence
	 */
	public void setEventPersistence(EventPersistence eventPersistence) {
		this.eventPersistence = eventPersistence;
	}

	/**
	 * Returns the talk local service.
	 *
	 * @return the talk local service
	 */
	public TalkLocalService getTalkLocalService() {
		return talkLocalService;
	}

	/**
	 * Sets the talk local service.
	 *
	 * @param talkLocalService the talk local service
	 */
	public void setTalkLocalService(TalkLocalService talkLocalService) {
		this.talkLocalService = talkLocalService;
	}

	/**
	 * Returns the talk persistence.
	 *
	 * @return the talk persistence
	 */
	public TalkPersistence getTalkPersistence() {
		return talkPersistence;
	}

	/**
	 * Sets the talk persistence.
	 *
	 * @param talkPersistence the talk persistence
	 */
	public void setTalkPersistence(TalkPersistence talkPersistence) {
		this.talkPersistence = talkPersistence;
	}

	/**
	 * Returns the venue local service.
	 *
	 * @return the venue local service
	 */
	public bg.jug.workshop.liferay.cfp.service.VenueLocalService getVenueLocalService() {
		return venueLocalService;
	}

	/**
	 * Sets the venue local service.
	 *
	 * @param venueLocalService the venue local service
	 */
	public void setVenueLocalService(
		bg.jug.workshop.liferay.cfp.service.VenueLocalService venueLocalService) {
		this.venueLocalService = venueLocalService;
	}

	/**
	 * Returns the venue persistence.
	 *
	 * @return the venue persistence
	 */
	public VenuePersistence getVenuePersistence() {
		return venuePersistence;
	}

	/**
	 * Sets the venue persistence.
	 *
	 * @param venuePersistence the venue persistence
	 */
	public void setVenuePersistence(VenuePersistence venuePersistence) {
		this.venuePersistence = venuePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the ddm structure link local service.
	 *
	 * @return the ddm structure link local service
	 */
	public com.liferay.dynamic.data.mapping.service.DDMStructureLinkLocalService getDDMStructureLinkLocalService() {
		return ddmStructureLinkLocalService;
	}

	/**
	 * Sets the ddm structure link local service.
	 *
	 * @param ddmStructureLinkLocalService the ddm structure link local service
	 */
	public void setDDMStructureLinkLocalService(
		com.liferay.dynamic.data.mapping.service.DDMStructureLinkLocalService ddmStructureLinkLocalService) {
		this.ddmStructureLinkLocalService = ddmStructureLinkLocalService;
	}

	/**
	 * Returns the ddm structure link persistence.
	 *
	 * @return the ddm structure link persistence
	 */
	public DDMStructureLinkPersistence getDDMStructureLinkPersistence() {
		return ddmStructureLinkPersistence;
	}

	/**
	 * Sets the ddm structure link persistence.
	 *
	 * @param ddmStructureLinkPersistence the ddm structure link persistence
	 */
	public void setDDMStructureLinkPersistence(
		DDMStructureLinkPersistence ddmStructureLinkPersistence) {
		this.ddmStructureLinkPersistence = ddmStructureLinkPersistence;
	}

	/**
	 * Returns the ddm template link local service.
	 *
	 * @return the ddm template link local service
	 */
	public com.liferay.dynamic.data.mapping.service.DDMTemplateLinkLocalService getDDMTemplateLinkLocalService() {
		return ddmTemplateLinkLocalService;
	}

	/**
	 * Sets the ddm template link local service.
	 *
	 * @param ddmTemplateLinkLocalService the ddm template link local service
	 */
	public void setDDMTemplateLinkLocalService(
		com.liferay.dynamic.data.mapping.service.DDMTemplateLinkLocalService ddmTemplateLinkLocalService) {
		this.ddmTemplateLinkLocalService = ddmTemplateLinkLocalService;
	}

	/**
	 * Returns the ddm template link persistence.
	 *
	 * @return the ddm template link persistence
	 */
	public DDMTemplateLinkPersistence getDDMTemplateLinkPersistence() {
		return ddmTemplateLinkPersistence;
	}

	/**
	 * Sets the ddm template link persistence.
	 *
	 * @param ddmTemplateLinkPersistence the ddm template link persistence
	 */
	public void setDDMTemplateLinkPersistence(
		DDMTemplateLinkPersistence ddmTemplateLinkPersistence) {
		this.ddmTemplateLinkPersistence = ddmTemplateLinkPersistence;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("bg.jug.workshop.liferay.cfp.model.Talk",
			talkLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"bg.jug.workshop.liferay.cfp.model.Talk");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TalkLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Talk.class;
	}

	protected String getModelClassName() {
		return Talk.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = talkPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = bg.jug.workshop.liferay.cfp.service.EventLocalService.class)
	protected bg.jug.workshop.liferay.cfp.service.EventLocalService eventLocalService;
	@BeanReference(type = EventPersistence.class)
	protected EventPersistence eventPersistence;
	@BeanReference(type = TalkLocalService.class)
	protected TalkLocalService talkLocalService;
	@BeanReference(type = TalkPersistence.class)
	protected TalkPersistence talkPersistence;
	@BeanReference(type = bg.jug.workshop.liferay.cfp.service.VenueLocalService.class)
	protected bg.jug.workshop.liferay.cfp.service.VenueLocalService venueLocalService;
	@BeanReference(type = VenuePersistence.class)
	protected VenuePersistence venuePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.dynamic.data.mapping.service.DDMStructureLinkLocalService.class)
	protected com.liferay.dynamic.data.mapping.service.DDMStructureLinkLocalService ddmStructureLinkLocalService;
	@ServiceReference(type = DDMStructureLinkPersistence.class)
	protected DDMStructureLinkPersistence ddmStructureLinkPersistence;
	@ServiceReference(type = com.liferay.dynamic.data.mapping.service.DDMTemplateLinkLocalService.class)
	protected com.liferay.dynamic.data.mapping.service.DDMTemplateLinkLocalService ddmTemplateLinkLocalService;
	@ServiceReference(type = DDMTemplateLinkPersistence.class)
	protected DDMTemplateLinkPersistence ddmTemplateLinkPersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}